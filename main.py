from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, MessageHandler, filters, CommandHandler, ContextTypes
import os
import math
import psycopg2

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑'—î–¥–Ω—É–≤–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö –∑ Railway
host = "postgres.railway.internal"
dbname = "railway"
user = "postgres"
password = "zNBVWTNZedTfaFNTpCdAIgdQONutixEg"


# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
conn = psycopg2.connect(host=host, dbname=dbname, user=user, password=password)
cursor = conn.cursor()

# –í–∏–∫–æ–Ω–∞–Ω–Ω—è SQL –∑–∞–ø–∏—Ç—ñ–≤
cursor.execute("SELECT * FROM Kvadrat")

result = cursor.fetchall()
print(result)


# –ó–∞–∫—Ä–∏—Ç—Ç—è –∑'—î–¥–Ω–∞–Ω–Ω—è
cursor.close()
conn.close()




# –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ —Ü–µ–Ω—Ç—Ä—É (–º. –í—ñ–Ω–Ω–∏—Ü—è)
latitude_center = 49.2328
longitude_center = 28.4682

# –†–∞–¥—ñ—É—Å (10 –∫–º)
radius = 10000  # –≤ –º–µ—Ç—Ä–∞—Ö

# –†–æ–∑–º—ñ—Ä –∫–≤–∞–¥—Ä–∞—Ç–∞ (2*2 –º–µ—Ç—Ä–∏)
square_size = 2

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –≤—ñ–¥—Å—Ç–∞–Ω—ñ –º—ñ–∂ –¥–≤–æ–º–∞ —Ç–æ—á–∫–∞–º–∏ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Ñ–æ—Ä–º—É–ª–∏ –•–∞–≤–µ—Ä—Å–∏–Ω–∞
def haversine(lat1, lon1, lat2, lon2):
    R = 6371000  # –†–∞–¥—ñ—É—Å –ó–µ–º–ª—ñ –≤ –º–µ—Ç—Ä–∞—Ö
    phi1 = math.radians(lat1)
    phi2 = math.radians(lat2)
    delta_phi = math.radians(lat2 - lat1)
    delta_lambda = math.radians(lon2 - lon1)
    
    a = math.sin(delta_phi / 2) ** 2 + math.cos(phi1) * math.cos(phi2) * math.sin(delta_lambda / 2) ** 2
    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))
    return R * c  # –≤—ñ–¥—Å—Ç–∞–Ω—å –≤ –º–µ—Ç—Ä–∞—Ö

# –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –≤ –º–µ—Ç—Ä–∏
def gps_to_meters(lat, lon):
    distance_lat = haversine(latitude_center, longitude_center, lat, longitude_center)
    distance_lon = haversine(latitude_center, longitude_center, latitude_center, lon)
    return distance_lat, distance_lon

# –û–±—á–∏—Å–ª–∏—Ç–∏ –Ω–æ–º–µ—Ä –∫–≤–∞–¥—Ä–∞—Ç–∞ –∑–∞ GPS –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
def get_square_number(lat, lon):
    # –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –≤ –º–µ—Ç—Ä–∏
    dist_lat, dist_lon = gps_to_meters(lat, lon)
    
    # –í–∏–∑–Ω–∞—á–∏—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –∫–≤–∞–¥—Ä–∞—Ç–∞
    square_x = int(dist_lon // square_size)
    square_y = int(dist_lat // square_size)
    
    # –ù—É–º–µ—Ä–∞—Ü—ñ—è –∫–≤–∞–¥—Ä–∞—Ç—ñ–≤ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ 1
    square_number = (square_y * 1000 + square_x) + 1  # –î–æ–¥–∞—î–º–æ 1 –¥–ª—è –ø–æ—á–∞—Ç–∫—É –∑ 1
    return square_number


# –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:
latitude_input = 49.2400  # GPS –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏
longitude_input = 28.4710

square_number = get_square_number(latitude_input, longitude_input)
print(f"–ù–æ–º–µ—Ä –∫–≤–∞–¥—Ä–∞—Ç–∞: {square_number}")



TOKEN = os.getenv("BOT_TOKEN")
GRID_SIZE_METERS = 2

def get_grid_coords(lat, lon):
    lat_m = lat * 111320
    lon_m = lon * 40075000 * math.cos(math.radians(lat)) / 360
    grid_x = int(lat_m // GRID_SIZE_METERS)
    grid_y = int(lon_m // GRID_SIZE_METERS)
    return (grid_x, grid_y)


 async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    kb = [[KeyboardButton("–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ª–æ–∫–∞—Ü—ñ—é", request_location=True)]]
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –ù–∞–¥—ñ—à–ª–∏ —Å–≤–æ—é –ª–æ–∫–∞—Ü—ñ—é üåç", 
                                    reply_markup=ReplyKeyboardMarkup(kb, one_time_keyboard=True, resize_keyboard=True))

 async def location_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    loc = update.message.location
    grid = get_grid_coords(loc.latitude, loc.longitude)
    await update.message.reply_text(f"–¢–∏ –≤ –∫–≤–∞–¥—Ä–∞—Ç—ñ {grid} ‚úÖ")
    	





app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(MessageHandler(filters.LOCATION, location_handler))
app.run_polling()